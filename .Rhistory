devtools::check()
devtools::check()
devtools::build()
devtools::install()
library(TransriptoPathR)
getwd()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/TranscriptoPathR")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
install_github("temizna/TranscriptoPathR")
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
library(devtools)
install_github("temizna/TranscriptoPathR")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
msigdbr_species()
library(msigdbr)
msigdbr_species()
msigdbr_collections(db_species = "Cl")
msigdbr_collections(db_species = "Dog")
?msigdbr_collections
msigdbr_species()
msigdbr(species = "rat", collection = "C2")
msigdbr(species = "dog", collection = "C2")
setwd("/Users/temizna/TranscriptoPathR")
devtools::document()
BiocManager::install("org.Sc.sgd.db")
BiocManager::install("org.Cf.eg.db")
BiocManager::install("org.Rn.eg.db")
devtools::document()
devtools::check()
remove.packages("pkgbuild")
install.packages("pkgbuild")
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
remove.packages(TranscriptoPathR)
remove.packages(TranscriptoPathR)
remove.packages("TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
msigdbr
library(msigdbr)
msigdbr_collections
msigdbr_collections()
msigdbr_species()
msigdbr(species="dog")
print(msigdbr(species="dog", n=100)
)
print(msigdbr(species="dog"), n=100)
msigdbr(species="dog")[1:5,]
msigdbr(species="dog")$gs_name
msigdbr(species="dog")$gs_collection
msigdbr(species="dog")$gs_subcollection
summary(msigdbr(species="dog")$gs_subcollection)
unique(msigdbr(species="dog")$gs_subcollection)
remove.packages("TranscriptoPathR")
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
devtools::install()
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
library(msigdbdr)
library(msigdbr)
msigdbr_collections(db_species = "Hs")
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
output$download_cnet_plot <- downloadHandler(
filename = function() { paste0("Pathway_",input$pathway_db,"_",input$pathway_direction,"_cnet_plot.pdf", sep="") },
content = function(file) {
pathway_result<-pathway_result_rv()
pdf(file)
print(enrichplot::cnetplot(pathway_result))
dev.off()
}
)
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
setwd("/Users/temizna/TranscriptoPathR")
devtools::install()
setwd("/Users/temizna/")
library(TranscriptoPathR)
TranscriptoPathR::run_app()
?install_github
library(ProgesteromicsR)
ProgesteromicsR::run_app()
getwd()
log2(1.1)
log2(0.0001)
log2(0.0005)
log2(1.0005)
getwd()
ProgesteromicsR::run_app()
ProgesteromicsR::run_app()
devtools::install_github("temizna/ProgesteromicsR", force=TRUE)
library(ProgesteromicsR)
ProgesteromicsR::run_app()
ProgesteromicsR::run_app()
ProgesteromicsR::run_app()
devtools::install_github("temizna/ProgesteromicsR", force=TRUE)
library(ProgesteromicsR)
ProgesteromicsR::run_app()
devtools::install_github("temizna/ProgesteromicsR", force=TRUE)
library(ProgesteromicsR)
ProgesteromicsR::run_app()
devtools::install_github("temizna/ProgesteromicsR", force=TRUE)
library(ProgesteromicsR)
ProgesteromicsR::run_app()
devtools::install_github("temizna/ProgesteromicsR", force=TRUE)
library(ProgesteromicsR)
ProgesteromicsR::run_app()
devtools::install_github("temizna/ProgesteromicsR", force=TRUE)
library(ProgesteromicsR)
ProgesteromicsR::run_app()
devtools::install_github("temizna/ProgesteromicsR", force=TRUE)
library(ProgesteromicsR)
ProgesteromicsR::run_app()
devtools::install_github("temizna/ProgesteromicsR", force=TRUE)
library(ProgesteromicsR)
ProgesteromicsR::run_app()
devtools::install_github("temizna/ProgesteromicsR", force=TRUE)
library(ProgesteromicsR)
ProgesteromicsR::run_app()
source("~/TranscriptoPathR/R/mod_gene_expression.R")
devtools::install_github("temizna/ProgesteromicsR", force=TRUE)
library(ProgesteromicsR)
ProgesteromicsR::run_app()
devtools::install_github("temizna/ProgesteromicsR", force=TRUE)
ProgesteromicsR::run_app()
TranscriptoPathR::run_app()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
TranscriptoPathR::run_app()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install_github("temizna/TranscriptoPathR", force=TRUE)
devtools::install_github("temizna/TranscriptoPathR", force=TRUE)
devtools::install_github("temizna/TranscriptoPathR", force=TRUE)
getwd())
getwd()
setwd("/Users/temizna/TranscriptoPathR")
getwd()
devtools::document()
devtools::check()
devtools::install_github("temizna/TranscriptoPathR", force=TRUE)
library(TranscriptoPathR)
TranscriptoPathR::run_app()
rat_hallmark <- msigdbr(species = "Rattus norvegicus", category = "H")
head(rat_hallmark)
devtools::document()
devtools::check()
BiocManager::install(c(
"DESeq2", "GEOquery", "Biobase", "clusterProfiler", "enrichplot",
"ComplexHeatmap", "msigdbr","GSEABase", "ReactomePA", "GSVA","SummerizedExperiment","limma",
"org.Hs.eg.db", "org.Mm.eg.db", "org.Sc.sgd.db","org.Cf.eg.db","org.Rn.eg.db","AnnotationDbi"
))
devtools::document()
devtools::check()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
# Show where ComplexHeatmap lives
.libPaths()
system.file(package = "ComplexHeatmap")
# If a 00LOCK dir exists from a failed install, remove it (adjust path if needed)
unlink(file.path(.libPaths()[1], "00LOCK-ComplexHeatmap"), recursive = TRUE, force = TRUE)
remove.packages("ComplexHeatmap")
# Optional but helpful if versions are tangled:
# remove.packages("circlize")
install.packages("BiocManager")
BiocManager::version()          # should print the Bioc release compatible with R 4.5
# Try normal (binary) install
BiocManager::install("ComplexHeatmap", ask = FALSE, update = TRUE)
# If you still get lazy-load errors, force a source build:
BiocManager::install("ComplexHeatmap", ask = FALSE, update = TRUE, type = "source")
library(ComplexHeatmap)
sessionInfo()   # sanity check versions; should list ComplexHeatmap + circlize
for (pkg in c("RSQLite","DBI","blob","bit64","ComplexHeatmap","circlize","GlobalOptions","GetoptLong")) {
unlink(file.path(lib, paste0("00LOCK-", pkg)), recursive = TRUE, force = TRUE)
}
for (pkg in c("RSQLite","DBI","blob","bit64")) {
try(remove.packages(pkg), silent = TRUE)
unlink(file.path(lib, pkg), recursive = TRUE, force = TRUE)
}
install.packages(c("DBI","blob","bit64","RSQLite"), type = "binary")
# If the error persists, force a source build:
install.packages("RSQLite", type = "source")
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
remove.packages("TranscriptoPathR", lib="~/Library/R/arm64/4.5/library")
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/mod_gsva.R")   # shows offending lines & chars
tools::showNonASCII("R")                  # scan the whole R/ folder
devtools::document()
devtools::check()
unlink(c("DEoptimR","diptest","flexmix","fpc","ggkegg","ggupset","kernlab",
"mclust","modeltools","pathfindR","pathfindR.data","prabclus","robustbase"),
recursive = TRUE, force = TRUE)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
TranscriptoPathR::run_app()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::check()
tools::showNonASCIIfile("R/mod_cross_plot.R")
# or line numbers:
x <- readLines("R/mod_cross_plot.R", warn = FALSE, encoding = "UTF-8")
which(grepl("[^\\x00-\\x7F]", x))
x[grepl("[^\\x00-\\x7F]", x)]
devtools::check()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
pkgload::dev_help('mod_nonoverlap_server')
# Detach if somehow loaded (safe no-op if not)
if ("xml2" %in% loadedNamespaces()) try(unloadNamespace("xml2"), silent = TRUE)
# Remove packages
try(remove.packages(c("xml2","commonmark","roxygen2")), silent = TRUE)
# Belt-and-suspenders: nuke leftover dirs (adjust path if .libPaths() differs)
unlink("~/Library/R/arm64/4.5/library/xml2",        recursive = TRUE, force = TRUE)
unlink("~/Library/R/arm64/4.5/library/commonmark",  recursive = TRUE, force = TRUE)
unlink("~/Library/R/arm64/4.5/library/roxygen2",    recursive = TRUE, force = TRUE)
install.packages("pak", repos = "https://cloud.r-project.org")
Sys.setenv(R_INSTALL_STAGED = "false")  # avoids staging quirks on macOS
# Prefer binaries; if you still get the "built under R 4.5.1" warning and want it gone, install from source once.
pak::pkg_install(c("xml2","commonmark","roxygen2"))
# If you want to force a local build to match your exact R (and silence the warning):
# install.packages("xml2", type = "source")
devtools::document()
getwd()
devtools::document()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
TranscriptoPathR::run_app()
install.packages("ctc")
BiocManager::install("ctc")
library(ctc)
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
TranscriptoPathR::run_app()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
devtools::document()
devtools::install()
library(TranscriptoPathR)
TranscriptoPathR::run_app()
